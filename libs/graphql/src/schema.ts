/* eslint-disable @typescript-eslint/ban-types,@typescript-eslint/no-explicit-any */
// WARNING: This file is automatically generated. Do not edit.
import {Prisma} from '@prisma/client'
import {
  GraphQLResolveInfo,
  GraphQLScalarType,
  GraphQLScalarTypeConfig,
} from 'graphql'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends {[key: string]: unknown}> = {[K in keyof T]: T[K]}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
export type RequireFields<T, K extends keyof T> = {
  [X in Exclude<keyof T, K>]?: T[X]
} & {[P in K]-?: NonNullable<T[P]>}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: Date
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Prisma.JsonValue
}

export type CreateEpisodeInput = {
  content?: InputMaybe<Scalars['JSON']>
  picture?: InputMaybe<Scalars['String']>
  showId: Scalars['String']
  summary?: InputMaybe<Scalars['String']>
  title: Scalars['String']
}

export type CreateProfileInput = {
  content?: InputMaybe<Scalars['JSON']>
  displayName?: InputMaybe<Scalars['String']>
  email: Scalars['String']
  picture?: InputMaybe<Scalars['String']>
  userId: Scalars['String']
}

export type CreateShowInput = {
  content?: InputMaybe<Scalars['JSON']>
  picture?: InputMaybe<Scalars['String']>
  summary?: InputMaybe<Scalars['String']>
  title: Scalars['String']
}

export type CreateUserInput = {
  profile?: InputMaybe<CreateUserProfileInput>
}

export type CreateUserProfileInput = {
  content?: InputMaybe<Scalars['JSON']>
  displayName?: InputMaybe<Scalars['String']>
  email: Scalars['String']
  picture?: InputMaybe<Scalars['String']>
}

export type Episode = {
  __typename?: 'Episode'
  content?: Maybe<Scalars['JSON']>
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  picture?: Maybe<Scalars['String']>
  show?: Maybe<Show>
  showId?: Maybe<Scalars['String']>
  summary?: Maybe<Scalars['String']>
  title: Scalars['String']
  updatedAt: Scalars['DateTime']
}

export type EpisodeCondition = {
  createdAt?: InputMaybe<Scalars['DateTime']>
  id?: InputMaybe<Scalars['ID']>
  picture?: InputMaybe<Scalars['String']>
  showId?: InputMaybe<Scalars['String']>
  summary?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
  updatedAt?: InputMaybe<Scalars['DateTime']>
}

export enum EpisodesOrderBy {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SummaryAsc = 'SUMMARY_ASC',
  SummaryDesc = 'SUMMARY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
}

export type EpisodesPage = {
  __typename?: 'EpisodesPage'
  count: Scalars['Int']
  data: Array<Episode>
  page: Scalars['Int']
  pageCount: Scalars['Int']
  total: Scalars['Int']
}

export type MutateEpisodeResult = {
  __typename?: 'MutateEpisodeResult'
  episode?: Maybe<Episode>
}

export type MutateProfileResult = {
  __typename?: 'MutateProfileResult'
  profile?: Maybe<Profile>
}

export type MutateShowResult = {
  __typename?: 'MutateShowResult'
  show?: Maybe<Show>
}

export type MutateUserResult = {
  __typename?: 'MutateUserResult'
  user?: Maybe<User>
}

export type Mutation = {
  __typename?: 'Mutation'
  createEpisode: MutateEpisodeResult
  createProfile: MutateProfileResult
  createShow: MutateShowResult
  deleteEpisode: Scalars['Boolean']
  deleteProfile: Scalars['Boolean']
  deleteShow: Scalars['Boolean']
  getOrCreateCurrentUser: MutateUserResult
  updateCurrentUser: MutateUserResult
  updateEpisode: MutateEpisodeResult
  updateProfile: MutateProfileResult
  updateShow: MutateShowResult
}

export type MutationCreateEpisodeArgs = {
  input: CreateEpisodeInput
}

export type MutationCreateProfileArgs = {
  input: CreateProfileInput
}

export type MutationCreateShowArgs = {
  input: CreateShowInput
}

export type MutationDeleteEpisodeArgs = {
  id: Scalars['ID']
}

export type MutationDeleteProfileArgs = {
  id: Scalars['ID']
}

export type MutationDeleteShowArgs = {
  id: Scalars['ID']
}

export type MutationGetOrCreateCurrentUserArgs = {
  input: CreateUserInput
}

export type MutationUpdateCurrentUserArgs = {
  input: UpdateUserInput
}

export type MutationUpdateEpisodeArgs = {
  id: Scalars['ID']
  input: UpdateEpisodeInput
}

export type MutationUpdateProfileArgs = {
  id: Scalars['ID']
  input: UpdateProfileInput
}

export type MutationUpdateShowArgs = {
  id: Scalars['ID']
  input: UpdateShowInput
}

export type Profile = {
  __typename?: 'Profile'
  city?: Maybe<Scalars['String']>
  content?: Maybe<Scalars['JSON']>
  createdAt: Scalars['DateTime']
  displayName?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  id: Scalars['ID']
  picture?: Maybe<Scalars['String']>
  stateProvince?: Maybe<Scalars['String']>
  updatedAt: Scalars['DateTime']
  user?: Maybe<User>
  userId?: Maybe<Scalars['String']>
}

export type ProfileCondition = {
  createdAt?: InputMaybe<Scalars['DateTime']>
  displayName?: InputMaybe<Scalars['String']>
  email?: InputMaybe<Scalars['String']>
  id?: InputMaybe<Scalars['ID']>
  picture?: InputMaybe<Scalars['String']>
  updatedAt?: InputMaybe<Scalars['DateTime']>
  userId?: InputMaybe<Scalars['ID']>
}

export enum ProfilesOrderBy {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  DisplayNameAsc = 'DISPLAY_NAME_ASC',
  DisplayNameDesc = 'DISPLAY_NAME_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
}

export type ProfilesPage = {
  __typename?: 'ProfilesPage'
  count: Scalars['Int']
  data: Array<Profile>
  page: Scalars['Int']
  pageCount: Scalars['Int']
  total: Scalars['Int']
}

export type Query = {
  __typename?: 'Query'
  getCurrentUser?: Maybe<User>
  getEpisode?: Maybe<Episode>
  getManyEpisodes: EpisodesPage
  getManyProfiles: ProfilesPage
  getManyShows: ShowsPage
  getProfile?: Maybe<Profile>
  getShow?: Maybe<Show>
}

export type QueryGetEpisodeArgs = {
  id: Scalars['ID']
}

export type QueryGetManyEpisodesArgs = {
  orderBy?: InputMaybe<Array<EpisodesOrderBy>>
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<EpisodeCondition>
}

export type QueryGetManyProfilesArgs = {
  orderBy?: InputMaybe<Array<ProfilesOrderBy>>
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<ProfileCondition>
}

export type QueryGetManyShowsArgs = {
  orderBy?: InputMaybe<Array<ShowsOrderBy>>
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<ShowCondition>
}

export type QueryGetProfileArgs = {
  id: Scalars['ID']
}

export type QueryGetShowArgs = {
  id: Scalars['ID']
}

export type Show = {
  __typename?: 'Show'
  content?: Maybe<Scalars['JSON']>
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  picture?: Maybe<Scalars['String']>
  summary?: Maybe<Scalars['String']>
  title: Scalars['String']
  updatedAt: Scalars['DateTime']
}

export type ShowCondition = {
  createdAt?: InputMaybe<Scalars['DateTime']>
  id?: InputMaybe<Scalars['ID']>
  picture?: InputMaybe<Scalars['String']>
  summary?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
  updatedAt?: InputMaybe<Scalars['DateTime']>
}

export enum ShowsOrderBy {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SummaryAsc = 'SUMMARY_ASC',
  SummaryDesc = 'SUMMARY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
}

export type ShowsPage = {
  __typename?: 'ShowsPage'
  count: Scalars['Int']
  data: Array<Show>
  page: Scalars['Int']
  pageCount: Scalars['Int']
  total: Scalars['Int']
}

export type UpdateEpisodeInput = {
  content?: InputMaybe<Scalars['JSON']>
  picture?: InputMaybe<Scalars['String']>
  showId?: InputMaybe<Scalars['String']>
  summary?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type UpdateProfileInput = {
  content?: InputMaybe<Scalars['JSON']>
  displayName?: InputMaybe<Scalars['String']>
  email?: InputMaybe<Scalars['String']>
  picture?: InputMaybe<Scalars['String']>
  userId?: InputMaybe<Scalars['String']>
}

export type UpdateShowInput = {
  content?: InputMaybe<Scalars['JSON']>
  picture?: InputMaybe<Scalars['String']>
  summary?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type UpdateUserInput = {
  isActive?: InputMaybe<Scalars['Boolean']>
  username?: InputMaybe<Scalars['String']>
}

export type User = {
  __typename?: 'User'
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  isActive: Scalars['Boolean']
  profile?: Maybe<Profile>
  profileId?: Maybe<Scalars['String']>
  updatedAt: Scalars['DateTime']
  username: Scalars['String']
}

export type WithIndex<TObject> = TObject & Record<string, any>
export type ResolversObject<TObject> = WithIndex<TObject>

export type ResolverTypeWrapper<T> = Promise<T> | T

export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>
}
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>

export interface SubscriptionSubscriberObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs
> {
  subscribe: SubscriptionSubscribeFn<
    {[key in TKey]: TResult},
    TParent,
    TContext,
    TArgs
  >
  resolve?: SubscriptionResolveFn<
    TResult,
    {[key in TKey]: TResult},
    TContext,
    TArgs
  >
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>
}

export type SubscriptionObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs
> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>

export type SubscriptionResolver<
  TResult,
  TKey extends string,
  TParent = {},
  TContext = {},
  TArgs = {}
> =
  | ((
      ...args: any[]
    ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
  obj: T,
  context: TContext,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>

export type NextResolverFn<T> = () => Promise<T>

export type DirectiveResolverFn<
  TResult = {},
  TParent = {},
  TContext = {},
  TArgs = {}
> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>
  CreateEpisodeInput: CreateEpisodeInput
  CreateProfileInput: CreateProfileInput
  CreateShowInput: CreateShowInput
  CreateUserInput: CreateUserInput
  CreateUserProfileInput: CreateUserProfileInput
  DateTime: ResolverTypeWrapper<Scalars['DateTime']>
  Episode: ResolverTypeWrapper<Episode>
  EpisodeCondition: EpisodeCondition
  EpisodesOrderBy: EpisodesOrderBy
  EpisodesPage: ResolverTypeWrapper<EpisodesPage>
  ID: ResolverTypeWrapper<Scalars['ID']>
  Int: ResolverTypeWrapper<Scalars['Int']>
  JSON: ResolverTypeWrapper<Scalars['JSON']>
  MutateEpisodeResult: ResolverTypeWrapper<MutateEpisodeResult>
  MutateProfileResult: ResolverTypeWrapper<MutateProfileResult>
  MutateShowResult: ResolverTypeWrapper<MutateShowResult>
  MutateUserResult: ResolverTypeWrapper<MutateUserResult>
  Mutation: ResolverTypeWrapper<{}>
  Profile: ResolverTypeWrapper<Profile>
  ProfileCondition: ProfileCondition
  ProfilesOrderBy: ProfilesOrderBy
  ProfilesPage: ResolverTypeWrapper<ProfilesPage>
  Query: ResolverTypeWrapper<{}>
  Show: ResolverTypeWrapper<Show>
  ShowCondition: ShowCondition
  ShowsOrderBy: ShowsOrderBy
  ShowsPage: ResolverTypeWrapper<ShowsPage>
  String: ResolverTypeWrapper<Scalars['String']>
  UpdateEpisodeInput: UpdateEpisodeInput
  UpdateProfileInput: UpdateProfileInput
  UpdateShowInput: UpdateShowInput
  UpdateUserInput: UpdateUserInput
  User: ResolverTypeWrapper<User>
}>

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Boolean: Scalars['Boolean']
  CreateEpisodeInput: CreateEpisodeInput
  CreateProfileInput: CreateProfileInput
  CreateShowInput: CreateShowInput
  CreateUserInput: CreateUserInput
  CreateUserProfileInput: CreateUserProfileInput
  DateTime: Scalars['DateTime']
  Episode: Episode
  EpisodeCondition: EpisodeCondition
  EpisodesPage: EpisodesPage
  ID: Scalars['ID']
  Int: Scalars['Int']
  JSON: Scalars['JSON']
  MutateEpisodeResult: MutateEpisodeResult
  MutateProfileResult: MutateProfileResult
  MutateShowResult: MutateShowResult
  MutateUserResult: MutateUserResult
  Mutation: {}
  Profile: Profile
  ProfileCondition: ProfileCondition
  ProfilesPage: ProfilesPage
  Query: {}
  Show: Show
  ShowCondition: ShowCondition
  ShowsPage: ShowsPage
  String: Scalars['String']
  UpdateEpisodeInput: UpdateEpisodeInput
  UpdateProfileInput: UpdateProfileInput
  UpdateShowInput: UpdateShowInput
  UpdateUserInput: UpdateUserInput
  User: User
}>

export interface DateTimeScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime'
}

export type EpisodeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Episode'] = ResolversParentTypes['Episode']
> = ResolversObject<{
  content?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  show?: Resolver<Maybe<ResolversTypes['Show']>, ParentType, ContextType>
  showId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  summary?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type EpisodesPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EpisodesPage'] = ResolversParentTypes['EpisodesPage']
> = ResolversObject<{
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  data?: Resolver<Array<ResolversTypes['Episode']>, ParentType, ContextType>
  page?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  pageCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export interface JsonScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON'
}

export type MutateEpisodeResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MutateEpisodeResult'] = ResolversParentTypes['MutateEpisodeResult']
> = ResolversObject<{
  episode?: Resolver<Maybe<ResolversTypes['Episode']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type MutateProfileResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MutateProfileResult'] = ResolversParentTypes['MutateProfileResult']
> = ResolversObject<{
  profile?: Resolver<Maybe<ResolversTypes['Profile']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type MutateShowResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MutateShowResult'] = ResolversParentTypes['MutateShowResult']
> = ResolversObject<{
  show?: Resolver<Maybe<ResolversTypes['Show']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type MutateUserResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MutateUserResult'] = ResolversParentTypes['MutateUserResult']
> = ResolversObject<{
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type MutationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']
> = ResolversObject<{
  createEpisode?: Resolver<
    ResolversTypes['MutateEpisodeResult'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateEpisodeArgs, 'input'>
  >
  createProfile?: Resolver<
    ResolversTypes['MutateProfileResult'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateProfileArgs, 'input'>
  >
  createShow?: Resolver<
    ResolversTypes['MutateShowResult'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateShowArgs, 'input'>
  >
  deleteEpisode?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteEpisodeArgs, 'id'>
  >
  deleteProfile?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteProfileArgs, 'id'>
  >
  deleteShow?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteShowArgs, 'id'>
  >
  getOrCreateCurrentUser?: Resolver<
    ResolversTypes['MutateUserResult'],
    ParentType,
    ContextType,
    RequireFields<MutationGetOrCreateCurrentUserArgs, 'input'>
  >
  updateCurrentUser?: Resolver<
    ResolversTypes['MutateUserResult'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateCurrentUserArgs, 'input'>
  >
  updateEpisode?: Resolver<
    ResolversTypes['MutateEpisodeResult'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateEpisodeArgs, 'id' | 'input'>
  >
  updateProfile?: Resolver<
    ResolversTypes['MutateProfileResult'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateProfileArgs, 'id' | 'input'>
  >
  updateShow?: Resolver<
    ResolversTypes['MutateShowResult'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateShowArgs, 'id' | 'input'>
  >
}>

export type ProfileResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Profile'] = ResolversParentTypes['Profile']
> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  content?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  displayName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  stateProvince?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>
  userId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type ProfilesPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProfilesPage'] = ResolversParentTypes['ProfilesPage']
> = ResolversObject<{
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  data?: Resolver<Array<ResolversTypes['Profile']>, ParentType, ContextType>
  page?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  pageCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type QueryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']
> = ResolversObject<{
  getCurrentUser?: Resolver<
    Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >
  getEpisode?: Resolver<
    Maybe<ResolversTypes['Episode']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetEpisodeArgs, 'id'>
  >
  getManyEpisodes?: Resolver<
    ResolversTypes['EpisodesPage'],
    ParentType,
    ContextType,
    RequireFields<QueryGetManyEpisodesArgs, never>
  >
  getManyProfiles?: Resolver<
    ResolversTypes['ProfilesPage'],
    ParentType,
    ContextType,
    RequireFields<QueryGetManyProfilesArgs, never>
  >
  getManyShows?: Resolver<
    ResolversTypes['ShowsPage'],
    ParentType,
    ContextType,
    RequireFields<QueryGetManyShowsArgs, never>
  >
  getProfile?: Resolver<
    Maybe<ResolversTypes['Profile']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetProfileArgs, 'id'>
  >
  getShow?: Resolver<
    Maybe<ResolversTypes['Show']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetShowArgs, 'id'>
  >
}>

export type ShowResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Show'] = ResolversParentTypes['Show']
> = ResolversObject<{
  content?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  summary?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type ShowsPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ShowsPage'] = ResolversParentTypes['ShowsPage']
> = ResolversObject<{
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  data?: Resolver<Array<ResolversTypes['Show']>, ParentType, ContextType>
  page?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  pageCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type UserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']
> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  profile?: Resolver<Maybe<ResolversTypes['Profile']>, ParentType, ContextType>
  profileId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}>

export type Resolvers<ContextType = any> = ResolversObject<{
  DateTime?: GraphQLScalarType
  Episode?: EpisodeResolvers<ContextType>
  EpisodesPage?: EpisodesPageResolvers<ContextType>
  JSON?: GraphQLScalarType
  MutateEpisodeResult?: MutateEpisodeResultResolvers<ContextType>
  MutateProfileResult?: MutateProfileResultResolvers<ContextType>
  MutateShowResult?: MutateShowResultResolvers<ContextType>
  MutateUserResult?: MutateUserResultResolvers<ContextType>
  Mutation?: MutationResolvers<ContextType>
  Profile?: ProfileResolvers<ContextType>
  ProfilesPage?: ProfilesPageResolvers<ContextType>
  Query?: QueryResolvers<ContextType>
  Show?: ShowResolvers<ContextType>
  ShowsPage?: ShowsPageResolvers<ContextType>
  User?: UserResolvers<ContextType>
}>
